#!/bin/bash

# Copyright (C) 2023 smitsohu smitsohu@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -eu

VERSION="0.3.0"
NAME="rofairy"
CONF_DIR="/etc/$NAME.d"

readonly VERSION
readonly NAME
readonly CONF_DIR

declare -a MOUNT_LIST_ORIG
declare -A SYNCFS_DICT

syncfs=0


usage () {
	cat <<-usageText >&2
	$NAME version $VERSION

	Usage:
	 $NAME [options] application [application args|options]

	Modify read-only restrictions per application.

	Options:
	 -r,  --readonly PATH       - remount PATH read-only
	 -ra, --readonly-all PATH   - remount PATH read-only,
	                              including all submounts
	 -w,  --readwrite PATH      - remount PATH read-write
	 -wa, --readwrite-all PATH  - remount PATH read-write,
	                              including all submounts
	 -f,  --file FILE           - load directives from FILE;
	                              if path is relative
	                              search FILE in $CONF_DIR
	 -h,  --help                - display this help and exit
	 -s,  --sync                - sync all filesystems that
	                              were remounted read-write

	Example:
	 setting a password when /etc is mounted read-only:
	 sudo $NAME -w /etc passwd
	usageText

	exit 1
}

fatal () {
	echo "$NAME: error: $1" >&2
	exit 1
}

warning () {
	echo "$NAME: warning: $1" >&2
}

do_sync () {
	local ret

	ret=0
	for fs in "${!SYNCFS_DICT[@]}"
	do
		sync -f "${SYNCFS_DICT["$fs"]}" || { warning "cannot sync filesystem: $fs"; ret=2; }
	done
	return "$ret"
}

make_mountpoint () {
	[[ -e "$1" ]] || fatal "cannot stat $1"
	mountpoint -q "$1" || mount -n -R "$1" "$1" || fatal "cannot remount $1"
}

verify_ro () {
	local mount
	local target
	local dev
	local vfsopts
	local fsopts

	for mount in "${MOUNT_LIST_ORIG[@]}"
	do
		read -r target dev vfsopts fsopts <<< "$mount"

		[[ "$2" == "$dev" ]] &&                        \
		[[ "$vfsopts" =~ ^rw && "$fsopts" =~ ^ro ]] && \
		fatal "not remounting $1: run first: mount -o remount,bind,ro ${target@E}"
	done
	return 0
}

remount_rw () {
	# need to clear ro in superblock as well; that should be ok though
	# as long as all mount points of this filesystem are set to ro
	# in the parent namespace
	local dev

	make_mountpoint "$1"
	dev=$(findmnt -r -o MAJ:MIN -n -M "$1")

	# verify mount points are ro in parent namespace
	verify_ro "$1" "$dev"

	# need one path for each filesystem
	SYNCFS_DICT["$dev"]="$1"

	mount -n -o "remount,rw" "$1" || fatal "cannot remount $1"
}

remount_ro () {
	# setting ro in superblock would make filesystem ro system wide
	# so modify mount point only
	make_mountpoint "$1"
	mount -n -o "remount,bind,ro" "$1" || fatal "cannot remount $1"
}

do_remount_all () {
	local mount
	local target
	local options

	make_mountpoint "$1"

	while read -r mount
	do
		read -r target options <<< "$mount"

		[[ "$2" == "ro" && "$options" =~ ^rw ]] && remount_ro "${target@E}" && continue
		[[ "$2" == "rw" && "$options" =~ ^ro ]] && remount_rw "${target@E}"
	done <<< "$(findmnt -r -o TARGET,OPTIONS -n -R "$1")"
	return 0
}

remount_ro_all () {  # remount $1 including all submounts read-only
	do_remount_all "$1" "ro"
}

remount_rw_all () {  # remount $1 including all submounts read-write
	do_remount_all "$1" "rw"
}

conffile_path () {
	if [[ "$1" == /* ]]
	then
		printf "%s" "$1"
	else
		printf "%s/%s" "$CONF_DIR" "$1"
	fi
}

conffile_apply () {
	local -i lineno
	local line

	[[ -f "$1" ]] || fatal "cannot find $1"

	lineno=0
	while read -r line
	do
		(( ++lineno ))
		[[ "$line" =~ ^[[:blank:]]*$ ]] && continue
		[[ "$line" =~ ^[[:blank:]]*# ]] && continue
		[[ "$line" =~ ^[[:blank:]]*(r|readonly)[[:blank:]]+(/.*)$ ]] && remount_ro "${BASH_REMATCH[2]}" && continue
		[[ "$line" =~ ^[[:blank:]]*(ra|readonly-all)[[:blank:]]+(/.*)$ ]] && remount_ro_all "${BASH_REMATCH[2]}" && continue
		[[ "$line" =~ ^[[:blank:]]*(w|readwrite)[[:blank:]]+(/.*)$ ]] && remount_rw "${BASH_REMATCH[2]}" && continue
		[[ "$line" =~ ^[[:blank:]]*(wa|readwrite-all)[[:blank:]]+(/.*)$ ]] && remount_rw_all "${BASH_REMATCH[2]}" && continue
		[[ "$line" =~ ^[[:blank:]]*(s|sync)[[:blank:]]*$ ]] && syncfs=1 && continue
		fatal "invalid line: $1: line $lineno"
	done < "$1"
}

main () {
	local oldscript
	local newscript
	local ret

	# <SNIP>
	[[ "$#" -eq 0 || "$1" == "-h" || "$1" == "--help" ]] && usage

	# remove this snippet and pass the modified script to unshare
	# propagation type of the new mount namespace will be "private"
	oldscript=$(<"$0")
	newscript=$(sed '/^[[:blank:]]*# <SNIP>$/,/^[[:blank:]]*# <SNAP>$/d' <<< "$oldscript")

	# shellcheck disable=SC2093
	exec unshare -m /bin/bash -c "$newscript" "$0" "$@"
	# <SNAP>

	readarray MOUNT_LIST_ORIG <<< "$(findmnt -r -o TARGET,MAJ:MIN,VFS-OPTIONS,FS-OPTIONS -n)"
	readonly MOUNT_LIST_ORIG

	while [[ "$#" -gt 0 ]]
	do
		case $1 in
			-r|--readonly)
				shift
				[[ "$#" -gt 0 ]] || usage
				remount_ro "$1"
				shift
				;;
			-ra|--readonly-all)
				shift
				[[ "$#" -gt 0 ]] || usage
				remount_ro_all "$1"
				shift
				;;
			-w|--readwrite)
				shift
				[[ "$#" -gt 0 ]] || usage
				remount_rw "$1"
				shift
				;;
			-wa|--readwrite-all)
				shift
				[[ "$#" -gt 0 ]] || usage
				remount_rw_all "$1"
				shift
				;;
			-f|--file)
				shift
				[[ "$#" -gt 0 ]] || usage
				conffile_apply "$(conffile_path "$1")"
				shift
				;;
			-s|--sync)
				syncfs=1
				shift
				;;
			-*)
				usage
				;;
			*)
				[[ "$syncfs" -ne 1 ]] && exec "$@"
				"$@"
				ret="$?"
				do_sync || exit "$?"
				exit "$ret"
				;;
		esac
	done

	usage
}

main "$@"
